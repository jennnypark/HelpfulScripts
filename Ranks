/*********************************************************************************************************	
Ranks allow you to assign a rank to each row within a partition of a result set
*********************************************************************************************************/

/*********************************************************************************************************
1. ROW_NUMBER
Returns a unique value for each row within a partition. For rows with duplicate values, row
numbers are arbitrarily assigned.
Source: https://www.sqlservertutorial.net/sql-server-window-functions/sql-server-row_number-function/
*********************************************************************************************************/

/* SYNTAX */

SELECT		ROW_NUMBER() OVER (PARTITION BY column_1	 -- the column you want to group by (if ommitted, it will rank against the entire data set)
				  ORDER BY	 column_2)		 -- how you want to order the row number
from		  [schema].[table_name]


/* EXAMPLE: Rank the items in an order by price
   If the prices are the same, then row_number will assign a random rank to the items with the same price */
select	 order_num
			  ,prod_id
			  ,item_price
			  ,ROW_NUMBER() OVER (PARTITION BY order_num	
								      ORDER BY	         item_price)			  
from		[dbo].[OrderItems]
order by	1,3


/*********************************************************************************************************
2. RANK
 Assigns a unique number for each row within a partition. For rows with duplicate values, the
 same ranks are assigned. Following duplicate values, ranks will be skipped. (IE: 1 2 2 4)
 Source: https://www.sqlservertutorial.net/sql-server-window-functions/sql-server-rank-function/
*********************************************************************************************************/
/* SYNTAX */

select		RANK() OVER (PARTITION BY  column_1		-- the column you want to group by (if ommitted, it will rank against the entire data set)
						     ORDER BY	   column_2)	-- how you want to order the rank
from		  [dbo].[OrderItems]

/* EXAMPLE: Rank the items in an order by price. 
If the prices are the same, then rank assignment will be the same. The next rankings will be skipped */

select		order_num
			   ,prod_id
			   ,item_price
			   ,RANK() OVER (PARTITION BY order_num	
						     ORDER BY	   item_price)		  
from		[dbo].[OrderItems]
order by	1,3


/*********************************************************************************************************
 3. DENSE RANK
Assigns a rank to each row within a partition of a result set. 
Unlike the RANK() function, the DENSE_RANK() function returns consecutive rank values. 
Rows in each partition receive the same ranks if they have the same values. (IE: 1 2 2 3)
Source: https://www.sqlservertutorial.net/sql-server-window-functions/sql-server-dense_rank-function/
*********************************************************************************************************/

select		DENSE_RANK() OVER (PARTITION BY  column_1		-- the column you want to group by (if ommitted, it will rank against the entire data set)
							         ORDER BY		 column_2)	-- how you want to order the rank
from		[dbo].[OrderItems]

/* EXAMPLE: Rank the items in an order by price
If the prices are the same, then rank assignment will be the same. The next rankings will follow a consecutively */
select	 order_num
			  ,prod_id
	  		,item_price
			  ,DENSE_RANK() OVER (PARTITION BY order_num	
						          ORDER BY	   item_price)	
from		[dbo].[OrderItems]
order by	1,3
